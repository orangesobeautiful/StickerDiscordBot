{{/* The line below tells Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */}}
{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "query-pagination" }}

{{/* Add the base header for the generated file */}}
{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

type QueryPaging[resultT any] interface {
    PagingClone() QueryPaging[resultT]
	PagingCount(ctx context.Context) (int, error)
	PagingLimit(limit int) QueryPaging[resultT]
	PagingOffset(offset int) QueryPaging[resultT]
	PagingAll(ctx context.Context) ([]*resultT, error)
}

{{/* Loop over all nodes and implement the "QueryPaging" interface */}}
{{ range $n := $.Nodes }}
    {{ $query := print $n.Name "Query" }}
    {{ $receiver := print $n.Receiver "q" }}
    func ({{ $receiver }} *{{ $query }}) PagingClone() QueryPaging[{{ $n.Name }}] {
        return {{ $receiver }}.Clone()
    }

    func ({{ $receiver }} *{{ $query }}) PagingCount(ctx context.Context) (int, error) {
        return {{ $receiver }}.Count(ctx)
    }

    func ({{ $receiver }} *{{ $query }}) PagingLimit(limit int) QueryPaging[{{ $n.Name }}] {
        return {{ $receiver }}.Limit(limit)
    }

    func ({{ $receiver }} *{{ $query }}) PagingOffset(offset int) QueryPaging[{{ $n.Name }}] {
        return {{ $receiver }}.Offset(offset)
    }

    func ({{ $receiver }} *{{ $query }}) PagingAll(ctx context.Context) ([]*{{ $n.Name }}, error) {
        return {{ $receiver }}.All(ctx)
    }
{{ end }}

{{ end }}